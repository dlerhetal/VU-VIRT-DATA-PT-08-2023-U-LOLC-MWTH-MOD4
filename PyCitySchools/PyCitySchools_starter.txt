#!/usr/bin/env python
# coding: utf-8

# # PyCity Schools Analysis
# 
# 1) Math is hard. For every one of the 15 schools we analyzed, more students passed the Reading test than the Math test, and the average Reading score is higher than the average Math score. There are no schools in this study where the average Math score is higher than the average Reading score, nor were there any schools in this study where more students passed the Math test than the Reading test. The differences are not always large, but they are consistent: For this district, at this time, with these district-wide standardized tests, Math is clearly harder than Reading. The 2 schools that come closest to parity between Math and Reading are Holden High School with only a .011709% difference between average Math and Reading scores and Pena High School where just 1.351351% more students passed the Reading test than the Math test. This is significant because both Holden and Pena are Charter schools.
# 
# 2) Charter schools score better than District schools on the district-wide standardized tests. All 5 of the Highest-Performing Schools (by % Overall Passing) are Charter schools, and The 5 Bottom Performing Schools (By % Overall Passing) are all District schools. On average, 90.432244% of Charter school students but only 53.672208% of District school students passed both the Math and Reading portions of the district-wide standardized tests, even though District schools typically budget more money per student than Charter schools, leading us to conclude that
# 
# 3) Money has not improved outcomes. A higher Per Student Budget has not produced higher scores or more students passing the district-wide standardized Math and Reading tests. In fact, the Spending Ranges (Per Student) demonstrates a negative correlation: student scores and passing rates decreased in each category as the Per Student Budget increased. We do not guarantee that more money produces poorer results because Rodriguez High School  which was the lowest performing school did not spend the most money, and the highest performing school, Cabrera High School did not spend the least. Money is not the most important factor; however,
# 
# 4) Size does matter. The largest Charter school is Wilson High School with 2,283 students and an overall success rate of 90.58257%, and the smallest District school is Ford High School with 2,739 students and an overall success rate of 54.28989%. While we do not claim an increase of 456 students explains a 36.29268% drop in the overall passing rate, it is the most consistently significant factor in this study. When evaluating the Scores by School Size, and particularly the School Summary, we find little difference between the outcomes from small Charter school with fewer than 1,000 students and medium Charter schools with 1,000 â€“ 2,000 students. The medium sized Charter schools perform just less than 1 percent better than the smaller Charter schools; however, once we cross over from the medium sized Charter schools to the larger District schools, the situation changes dramatically.
# 
# These numbers do not explain why larger District schools cost the city more money per student while Charter schools yield better outcomes on the district-wide standardized Math and Reading tests.

# In[2]:


# Dependencies and Setup
import pandas as pd
from pathlib import Path

# File to Load (Remember to Change These)
school_data_to_load = Path("Resources/schools_complete.csv")
student_data_to_load = Path("Resources/students_complete.csv")

# Read School and Student Data File and store into Pandas DataFrames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset.  
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])
school_data_complete.head()


# ## District Summary

# In[3]:


# Calculate the total number of unique schools
school_count = school_data_complete['school_name'].nunique()
school_count


# In[4]:


# Calculate the total number of students
student_count = school_data_complete['Student ID'].nunique()
student_count


# In[5]:


# Calculate the total budget
total_budget = school_data_complete['budget'].unique().sum()
total_budget


# In[6]:


# Calculate the average (mean) math score
average_math_score = school_data_complete['math_score'].mean()
average_math_score


# In[7]:


# Calculate the average (mean) reading score
average_reading_score = school_data_complete['reading_score'].mean()
average_reading_score


# In[8]:


# Use the following to calculate the percentage of students who passed math (math scores greather than or equal to 70)
passing_math_count = school_data_complete[(school_data_complete["math_score"] >= 70)].count()["student_name"]
passing_math_percentage = passing_math_count / float(student_count) * 100
passing_math_percentage


# In[9]:


# Calculate the percentage of students who passed reading (hint: look at how the math percentage was calculated)  
passing_reading_count = school_data_complete[(school_data_complete["reading_score"] >= 70)].count()["student_name"]
passing_reading_percentage = passing_reading_count / float(student_count) * 100
passing_reading_percentage


# In[10]:


# Use the following to calculate the percentage of students that passed math and reading
passing_math_reading_count = school_data_complete[
    (school_data_complete["math_score"] >= 70) & (school_data_complete["reading_score"] >= 70)
].count()["student_name"]
overall_passing_rate = passing_math_reading_count /  float(student_count) * 100
overall_passing_rate


# In[11]:


# Create a high-level snapshot of the district's key metrics in a DataFrame
district_summary = [student_count, total_budget, average_math_score, average_reading_score, passing_math_percentage, passing_reading_percentage, overall_passing_rate]
district_summary = pd.DataFrame({'Total Schools':[school_count], 
                                 'Total Students':[student_count], 
                                 'Total Budget':[total_budget], 
                                 'Average Math Score':[average_math_score], 
                                 'Average Reading Score':[average_reading_score], 
                                 '% Passing Math':[passing_math_percentage],
                                 '% Passing Reading':[passing_reading_percentage], 
                                 '% Overall Passing':[overall_passing_rate]})

# Formatting
district_summary["Total Students"] = district_summary["Total Students"].map("{:,}".format)
district_summary["Total Budget"] = district_summary["Total Budget"].map("${:,.2f}".format)

# Display the DataFrame
district_summary


# ## School Summary

# In[63]:


# Use the code provided to select all of the school types
school_type = school_data_complete.groupby(['school_name'])['type'].first()
school_type


# In[62]:


# Calculate the total student count per school
per_school_counts = school_data_complete.groupby('school_name')['Student ID'].count()
per_school_counts


# In[56]:


# Calculate the total school budget and per capita spending per school
per_school_budget = school_data_complete.groupby('school_name')['budget'].mean()
per_school_budget
per_school_capita = per_school_budget / per_school_counts
per_school_capita


# In[57]:


# Calculate the average test scores per school
per_school_math = school_data_complete.groupby('school_name')['math_score'].mean()
per_school_math
per_school_reading = school_data_complete.groupby('school_name')['reading_score'].mean()
per_school_reading


# In[58]:


# Calculate the number of students per school with math scores of 70 or higher
students_passing_math = school_data_complete[(school_data_complete["math_score"] >= 70)]
students_passing_math
school_students_passing_math = students_passing_math.groupby(["school_name"]).size()
school_students_passing_math


# In[61]:


# Calculate the number of students per school with reading scores of 70 or higher
students_passing_reading = school_data_complete[(school_data_complete["reading_score"] >= 70)]
#students_passing_reading
school_students_passing_reading = students_passing_reading.groupby(["school_name"]).size()
#school_students_passing_reading


# In[59]:


# Use the provided code to calculate the number of students per school that passed both math and reading with scores of 70 or higher
students_passing_math_and_reading = school_data_complete[(school_data_complete["reading_score"] >= 70) & (school_data_complete["math_score"] >= 70)]
students_passing_math_and_reading
school_students_passing_math_and_reading = students_passing_math_and_reading.groupby(["school_name"]).size()
school_students_passing_math_and_reading


# In[60]:


# Use the provided code to calculate the passing rates
per_school_passing_math = school_students_passing_math / per_school_counts * 100
#per_school_passing_math
per_school_passing_reading = school_students_passing_reading / per_school_counts * 100
#per_school_passing_reading
overall_passing_rate = school_students_passing_math_and_reading / per_school_counts * 100
#overall_passing_rate


# In[42]:


# Create a DataFrame called `per_school_summary` with columns for the calculations above.
per_school_summary = pd.DataFrame({"School Type": school_type, 
                                   "Total Students": per_school_counts, 
                                   "Total School Budget": per_school_budget, 
                                   "Per Student Budget":per_school_capita, 
                                   "Average Math Score": per_school_math, 
                                   "Average Reading Score": per_school_reading,
                                   "% Passing Math": per_school_passing_math, 
                                   "% Passing Reading": per_school_passing_reading, 
                                   "% Overall Passing": overall_passing_rate})

# Formatting
per_school_summary["Total School Budget"] = per_school_summary["Total School Budget"].map("${:,.2f}".format)
per_school_summary["Per Student Budget"] = per_school_summary["Per Student Budget"].map("${:,.2f}".format)

# Display the DataFrame
per_school_summary


# ## Highest-Performing Schools (by % Overall Passing)

# In[43]:


# Sort the schools by `% Overall Passing` in descending order and display the top 5 rows.
top_schools = per_school_summary.sort_values(["% Overall Passing"], ascending=False)
top_schools.head(5)


# ## Bottom Performing Schools (By % Overall Passing)

# In[44]:


# Sort the schools by `% Overall Passing` in ascending order and display the top 5 rows.
bottom_schools = per_school_summary.sort_values(["% Overall Passing"])
bottom_schools.head(5)


# ## Math Scores by Grade

# In[31]:


# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by `school_name` and take the mean of the `math_score` column for each.
ninth_grade_math_scores = ninth_graders.groupby('school_name')["math_score"].mean()
tenth_grade_math_scores = tenth_graders.groupby('school_name')["math_score"].mean()
eleventh_grade_math_scores = eleventh_graders.groupby('school_name')["math_score"].mean()
twelfth_grade_math_scores = twelfth_graders.groupby('school_name')["math_score"].mean()

# Combine each of the scores above into single DataFrame called `math_scores_by_grade`
math_scores_by_grade =  pd.DataFrame({
    "9th": ninth_grade_math_scores, 
    "10th": tenth_grade_math_scores,
    "11th": eleventh_grade_math_scores, 
    "12th": twelfth_grade_math_scores 
})

# Minor data wrangling
math_scores_by_grade.index.name = None

# Display the DataFrame
math_scores_by_grade


# ## Reading Score by Grade 

# In[32]:


# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by `school_name` and take the mean of the the `reading_score` column for each.
ninth_grade_reading_scores = ninth_graders.groupby('school_name')["reading_score"].mean()
tenth_grade_reading_scores = tenth_graders.groupby('school_name')["reading_score"].mean()
eleventh_grade_reading_scores = eleventh_graders.groupby('school_name')["reading_score"].mean()
twelfth_grade_reading_scores = twelfth_graders.groupby('school_name')["reading_score"].mean()

# Combine each of the scores above into single DataFrame called `reading_scores_by_grade`
reading_scores_by_grade = pd.DataFrame({
    "9th": ninth_grade_reading_scores, 
    "10th": tenth_grade_reading_scores,
    "11th": eleventh_grade_reading_scores, 
    "12th": twelfth_grade_reading_scores 
})

# Minor data wrangling
#reading_scores_by_grade = reading_scores_by_grade[["9th", "10th", "11th", "12th"]]
reading_scores_by_grade.index.name = None

# Display the DataFrame
reading_scores_by_grade


# ## Scores by School Spending

# In[35]:


# Establish the bins 
spending_bins = [0, 585, 630, 645, 680]
labels = ["<$585", "$585-630", "$630-645", "$645-680"]


# In[45]:


# Create a copy of the school summary since it has the "Per Student Budget" 
school_spending_df = per_school_summary.copy()
school_spending_df


# In[46]:


# Use `pd.cut` to categorize spending based on the bins.
school_spending_df["Spending Ranges (Per Student)"] = pd.cut(per_school_capita, bins=spending_bins, labels=labels)
school_spending_df


# In[64]:


#  Calculate averages for the desired columns. 
spending_math_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average Math Score"].mean()
spending_reading_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average Reading Score"].mean()
spending_passing_math = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Passing Math"].mean()
spending_passing_reading = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Passing Reading"].mean()
overall_passing_spending = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Overall Passing"].mean()
spending_math_scores
spending_reading_scores
spending_passing_math
spending_passing_reading
overall_passing_spending


# In[49]:


# Assemble into DataFrame
spending_summary =  pd.DataFrame({"Average Math Score": spending_math_scores, 
                                   "Average Reading Scores": spending_reading_scores, 
                                   "% Passing Math": spending_passing_math, 
                                   "% Passing Reading": spending_passing_reading, 
                                   "% Overall Passing": overall_passing_spending, 
                                   })

# Display results
spending_summary


# ## Scores by School Size

# In[50]:


# Establish the bins.
size_bins = [0, 1000, 2000, 5000]
labels = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]


# In[51]:


# Categorize the spending based on the bins
# Use `pd.cut` on the "Total Students" column of the `per_school_summary` DataFrame.

per_school_summary["School Size"] = pd.cut(per_school_counts, bins=size_bins, labels=labels)
per_school_summary


# In[65]:


# Calculate averages for the desired columns. 
size_math_scores = per_school_summary.groupby(["School Size"])["Average Math Score"].mean()
size_reading_scores = per_school_summary.groupby(["School Size"])["Average Reading Score"].mean()
size_passing_math = per_school_summary.groupby(["School Size"])["% Passing Math"].mean()
size_passing_reading = per_school_summary.groupby(["School Size"])["% Passing Reading"].mean()
size_overall_passing = per_school_summary.groupby(["School Size"])["% Overall Passing"].mean()
size_math_scores
size_reading_scores
size_passing_math
size_passing_reading
size_overall_passing


# In[53]:


# Create a DataFrame called `size_summary` that breaks down school performance based on school size (small, medium, or large).
# Use the scores above to create a new DataFrame called `size_summary`
size_summary = pd.DataFrame({"Average Math Score": size_math_scores, 
                            "Average Reading Scores": size_reading_scores, 
                            "% Passing Math": size_passing_math, 
                            "% Passing Reading": size_passing_reading, 
                            "% Overall Passing": size_overall_passing, 
                                   })

# Display results
size_summary


# ## Scores by School Type

# In[66]:


# Group the per_school_summary DataFrame by "School Type" and average the results.
average_math_score_by_type = per_school_summary.groupby(["School Type"])["Average Math Score"].mean()
average_reading_score_by_type = per_school_summary.groupby(["School Type"])["Average Reading Score"].mean()
average_percent_passing_math_by_type = per_school_summary.groupby(["School Type"])["% Passing Math"].mean()
average_percent_passing_reading_by_type = per_school_summary.groupby(["School Type"])["% Passing Reading"].mean()
average_percent_overall_passing_by_type = per_school_summary.groupby(["School Type"])["% Overall Passing"].mean()
average_math_score_by_type
average_reading_score_by_type
average_percent_passing_math_by_type
average_percent_passing_reading_by_type
average_percent_overall_passing_by_type


# In[55]:


# Assemble the new data by type into a DataFrame called `type_summary`
type_summary = pd.DataFrame({"Average Math Score": average_math_score_by_type, 
                            "Average Reading Scores": average_reading_score_by_type, 
                            "% Passing Math": average_percent_passing_math_by_type, 
                            "% Passing Reading": average_percent_passing_reading_by_type, 
                            "% Overall Passing": average_percent_overall_passing_by_type, 
                                   })

# Display results
type_summary


# In[ ]:




